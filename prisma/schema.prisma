// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  passwordHash String
  fullName   String?
  photoUrl   String?
  createdAt  DateTime @default(now())
  resumes    Resume[]
  jobScrapes JobScrape[]
  savedJobs  SavedJob[]
  companyViews UserCompanyView[]
}

model Resume {
  id                   String         @id @default(uuid())
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  originalResumeUrl    String?
  aiGeneratedResumeUrl String?
  promptUsed           String?
  status               String         @default("draft")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  inputs               ResumeInput?
  template             ResumeTemplate?

  @@unique([id])
}

model ResumeInput {
  id              String   @id @default(uuid())
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId        String   @unique
  education       Json
  experience      Json
  skills          String[]
  certifications  String[]
  projects        Json
  extracurricular Json
  careerSummary   String?
  preferredRole   String?
  preferredIndustry String?
}

model Template {
  id         String   @id @default(uuid())
  name       String
  category   String
  previewUrl String
  fileUrl    String
  resumes    ResumeTemplate[]
}

model ResumeTemplate {
  id         String   @id @default(uuid())
  resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId   String   @unique
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  selectedAt DateTime @default(now())
}

model JobScrape {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  scrapeDate      DateTime
  dateRangeStart  DateTime
  dateRangeEnd    DateTime
  totalJobsFound  Int
  createdAt       DateTime @default(now())
  jobs            Job[]
}

model Job {
  id              String      @id @default(uuid())
  scrape          JobScrape   @relation(fields: [scrapeId], references: [id], onDelete: Cascade)
  scrapeId        String
  title           String
  companyName     String
  location        String
  industry        String
  experienceRequired String
  publishDate     DateTime
  deadline        DateTime?
  source          String
  applyLink       String
  matchScore      Float
  rating          String
  createdAt       DateTime @default(now())
  savedByUsers    SavedJob[]
}

model SavedJob {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  status    String   @default("saved")
  savedAt   DateTime @default(now())
}

model CompanyInsight {
  id                String   @id @default(uuid())
  companyName       String
  employeeSize      String
  cultureSummary    String
  layoffInfo        String
  recentHiringNews  String
  mediaLinks        Json
  friendlinessScore Float
  aiRating          String
  createdAt         DateTime @default(now())
  viewedByUsers     UserCompanyView[]
}

model UserCompanyView {
  id          String          @id @default(uuid())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  company     CompanyInsight  @relation(fields: [companyId], references: [id])
  companyId   String
  viewedAt    DateTime        @default(now())
}
